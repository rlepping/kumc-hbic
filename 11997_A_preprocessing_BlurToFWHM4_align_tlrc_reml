#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Wed Feb 29 17:25:43 2012"
echo "(version 2.63, October 4, 2011)"

# execute via : 
#   tcsh -xef 11997_preprocessing_align_tlrc_reml |& tee output.11997_preprocessing_align_tlrc_reml

# =========================== auto block: setup ============================
# script setup

# check that the current AFNI version is recent enough
afni_history -check_date 3 Aug 2011
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 3 Aug 2011)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = 9003
endif

# assign output directory name
set output_dir = $subj.results

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 5`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/A_PosMusic.1d  \
    /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/A_NegMusic.1d \
    /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/A_PosIADS.1d  \
    /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/A_NegIADS.1d  \
    /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/Response.1d   \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy pb00.{$subj}.anat_oblique+orig $output_dir/pb00.{$subj}.anat_oblique

#  Deoblique anatomical
3dWarp -deoblique -prefix $output_dir/pb00.{$subj}.anat_deoblique pb00.{$subj}.anat_oblique+orig

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir, while
# removing the first 4 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat pb00.{$subj}.r1+orig'[4..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat pb00.{$subj}.r2+orig'[4..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat pb00.{$subj}.r3+orig'[4..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat pb00.{$subj}.r4+orig'[4..$]'
3dTcat -prefix $output_dir/pb00.$subj.r05.tcat pb00.{$subj}.r5+orig'[4..$]'

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 3 -legendre \
                pb00.$subj.r$run.tcat+orig > outcount_r$run.1D
end

# catenate outlier counts into a single time series
cat outcount_r??.1D > outcount.rall.1D

# ================================= tshift =================================
# time shift data so all slice timing is the same 
foreach run ( $runs )
    3dTshift -tzero 0 -quintic -prefix pb01.$subj.r$run.tshift \
             pb00.$subj.r$run.tcat+orig
end

# ================================= deoblique ==================================
# 3dWarp -deoblique: Data aquired at 40 deg angle so deoblique each run 
# Added 3/16 RL
foreach run ( $runs )
    3dWarp -deoblique -prefix pb01.$subj.r$run.deob \
             pb01.$subj.r$run.tshift+orig
end

# Deoblique anataomical
3dWarp -deoblique -prefix pb00.{$subj}.anat_deoblique+orig \
	pb00.{$subj}.anat_oblique+orig

# ================================= align ==================================
# a2e: align anatomy to EPI registration base
# (new anat will be aligned and stripped, pb00.{$subj}.anat_deoblique_al_keep+orig)
# AddEdge added 6/1/12 RJL
align_epi_anat.py -anat2epi -anat pb00.{$subj}.anat_deoblique+orig \
       -suffix _al_keep                                       \
       -epi pb01.$subj.r01.deob+orig -epi_base 0            \
       -volreg off -tshift off -AddEdge

# ================================== tlrc ==================================
# warp anatomy to standard space

@auto_tlrc -base TT_N27+tlrc \
    -input pb00.{$subj}.anat_deoblique_al_keep+orig \
    -no_ss -suffix NONE

# ================================= volreg =================================
# align each dset to base volume, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f pb00.{$subj}.anat_deoblique_al_keep+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset:                            \
        pb00.{$subj}.anat_deoblique_al_keep+tlrc.HEAD" 
    exit
endif

# create an all-1 dataset to mask the extents of the warp
3dcalc -a pb01.$subj.r01.deob+orig -expr 1 -prefix rm.epi.all1

# register and warp
foreach run ( $runs )
    # register each volume to the base
    3dvolreg -verbose -zpad 1 -base pb01.$subj.r01.deob+orig'[0]' \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run     \
             -cubic                                                 \
             -1Dmatrix_save mat.r$run.vr.aff12.1D                   \
             pb01.$subj.r$run.deob+orig

    # catenate volreg and tlrc transformations
    cat_matvec -ONELINE                                             \
               pb00.{$subj}.anat_deoblique_al_keep+tlrc::WARP_DATA -I    \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform : volreg and tlrc
    3dAllineate -base pb00.{$subj}.anat_deoblique_al_keep+tlrc           \
                -input pb01.$subj.r$run.deob+orig                 \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D             \
                -mast_dxyz 2.5                                      \
                -prefix rm.epi.nomask.r$run 

    # warp the all-1 dataset for extents masking 
    3dAllineate -base pb00.{$subj}.anat_deoblique_al_keep+tlrc           \
                -input rm.epi.all1+orig                             \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D             \
                -mast_dxyz 2.5 -final NN -quiet                     \
                -prefix rm.epi.1.r$run 

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+tlrc
end

# make a single file of registration params
cat dfile.r??.1D > dfile.rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+tlrc
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+tlrc -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+tlrc -b mask_epi_extents+tlrc     \
           -expr 'a*b' -prefix pb02.$subj.r$run.volreg
end

# create an anat_final dataset, aligned with stats
3dcopy pb00.{$subj}.anat_deoblique_al_keep+tlrc anat_final.$subj

# ================================== blur ==================================
# blur each volume of each run
# modified to use 3dBlurToFWHM JNP 20Mar12
foreach run ( $runs )
    3dBlurToFWHM    -input pb02.$subj.r$run.volreg+tlrc -FWHM 4.0 \
                    -prefix pb03.$subj.r$run.blur 
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -dilate 1 -prefix rm.mask_r$run pb03.$subj.r$run.blur+tlrc
end

# get mean and compare it to 0 for taking 'union'
3dMean -datum short -prefix rm.mean rm.mask*.HEAD
3dcalc -a rm.mean+tlrc -expr 'ispositive(a-0)' -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask.$subj+tlrc -prefix rm.resam.anat      \
           -input pb00.{$subj}.anat_deoblique_al_keep+tlrc

# convert resampled anat brain to binary mask
3dcalc -a rm.resam.anat+tlrc -expr 'ispositive(a)' -prefix mask_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+tlrc mask_anat.$subj+tlrc \
            |& tee out.mask_overlap.txt

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, TT_N27+tlrc)
3dresample -master full_mask.$subj+tlrc -prefix ./rm.resam.group   \
           -input /usr/local/afni/bin/TT_N27+tlrc

# convert resampled group brain to binary mask
3dcalc -a rm.resam.group+tlrc -expr 'ispositive(a)' -prefix mask_group

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
    3dTstat -prefix rm.mean_r$run pb03.$subj.r$run.blur+tlrc
    3dcalc -a pb03.$subj.r$run.blur+tlrc -b rm.mean_r$run+tlrc \
           -c mask_epi_extents+tlrc                            \
           -expr 'c * min(200, a/b*100)*step(a)*step(b)'       \
           -prefix pb04.$subj.r$run.scale
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile.rall.1D -set_nruns 5                           \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile.rall.1D -set_nruns 5                           \
           -derivative -demean -write motion_deriv.1D

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile.rall.1D -set_nruns 5                           \
    -set_tr 3 -show_censor_count -censor_prev_TR                        \
    -censor_motion 1 motion_${subj}

# run the regression analysis
# added Contrasts: All Auditory Stimu vs Baseline; All Music vs Baseline; All IADS vs Baseline 6/1/12 RJL

3dDeconvolve -input pb04.$subj.r??.scale+tlrc.HEAD                      \
    -censor motion_${subj}_censor.1D                                    \
    -polort 3                                                           \
    -num_stimts 11                                                      \
    -stim_times 1 stimuli/A_PosMusic.1d 'BLOCK(31.5,1)'                 \
    -stim_label 1 PosMusic                                              \
    -stim_times 2 stimuli/A_NegMusic.1d 'BLOCK(31.5,1)'                 \
    -stim_label 2 NegMusic                                              \
    -stim_times 3 stimuli/A_PosIADS.1d 'BLOCK(31.5,1)'                  \
    -stim_label 3 PosIADS                                               \
    -stim_times 4 stimuli/A_NegIADS.1d 'BLOCK(31.5,1)'                  \
    -stim_label 4 NegIADS                                               \
    -stim_times 5 stimuli/Response.1d 'BLOCK(3,1)'                   \
    -stim_label 5 Response                                              \
    -stim_file 6 motion_demean.1D'[0]' -stim_base 6 -stim_label 6 roll  \
    -stim_file 7 motion_demean.1D'[1]' -stim_base 7 -stim_label 7 pitch \
    -stim_file 8 motion_demean.1D'[2]' -stim_base 8 -stim_label 8 yaw   \
    -stim_file 9 motion_demean.1D'[3]' -stim_base 9 -stim_label 9 dS    \
    -stim_file 10 motion_demean.1D'[4]' -stim_base 10 -stim_label 10 dL \
    -stim_file 11 motion_demean.1D'[5]' -stim_base 11 -stim_label 11 dP \
    -gltsym 'SYM: +PosMusic +NegMusic +PosIADS +NegIADS'                \
    -glt_label 1 AllAuditoryStim                                        \
    -gltsym 'SYM: +PosMusic +NegMusic'                                  \
    -glt_label 2 MusicAll                                               \
    -gltsym 'SYM: +PosIADS +NegIADS'                                    \
    -glt_label 3 IADSAll                                                \
    -gltsym 'SYM: +PosMusic -NegMusic'                                  \
    -glt_label 4 PosMusic-NegMusic                                      \
    -gltsym 'SYM: +PosIADS -NegIADS'                                    \
    -glt_label 5 PosIADS-NegIADS                                        \
    -gltsym 'SYM: +PosMusic -PosIADS'                                   \
    -glt_label 6 PosMusic-PosIADS                                       \
    -gltsym 'SYM: +NegMusic -NegIADS'                               \
    -glt_label 7 NegMusic-NegIADS                                       \
    -gltsym 'SYM: +PosMusic +PosIADS -NegMusic -NegIADS'      \
    -glt_label 8 PosAll-NegAll                                          \
    -gltsym 'SYM: +PosMusic +NegMusic -PosIADS -NegIADS'                \
    -glt_label 9 MusicAll-IADSALL                                       \
    -gltsym 'SYM: +PosMusic -NegMusic -PosIADS +NegIADS'                \
    -glt_label 10 FullInteraction                                       \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                             \
    -x1D_uncensored X.nocensor.xmat.1D                                  \
    -fitts fitts.$subj                                                  \
    -errts errts.$subj                                                  \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pariwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# -- execute the REML command script and check the status --
tcsh -x stats.REML_cmd 

# if 3dREMLfit fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dREMLfit error, failing...'
    exit
endif


# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb04.$subj.r??.scale+tlrc.HEAD

# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc
3dTstat -stdev -prefix rm.noise.all errts.$subj+tlrc
3dcalc -a rm.signal.all+tlrc -b rm.noise.all+tlrc                       \
       -c full_mask.$subj+tlrc                                          \
       -expr 'c*a/b' -prefix TSNR.$subj 

# create ideal files for fixed response stim types
1dcat X.nocensor.xmat.1D'[20]' > ideal_PosMusic.1D
1dcat X.nocensor.xmat.1D'[21]' > ideal_NegMusic.1D
1dcat X.nocensor.xmat.1D'[22]' > ideal_PosIADS.1D
1dcat X.nocensor.xmat.1D'[23]' > ideal_NegIADS.1D
1dcat X.nocensor.xmat.1D'[24]' > ideal_Response.1D

# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix sum_ideal.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ============================ blur estimation =============================
# compute blur estimates
touch blur_est.$subj.1D   # start with empty file

# -- estimate blur for each run in epits --
touch blur.epits.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( 101 101 101 101 101  )
    @ b1 += $reps  # last index for current run
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                         \
        all_runs.$subj+tlrc"[$b0..$b1]" >> blur.epits.1D
    @ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D\'` )
echo average epits blurs: $blurs
echo "$blurs   # epits blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in errts --
touch blur.errts.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( 101 101 101 101 101  )
    @ b1 += $reps  # last index for current run
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                         \
        errts.$subj+tlrc"[$b0..$b1]" >> blur.errts.1D
    @ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `3dTstat -mean -prefix - blur.errts.1D\'` )
echo average errts blurs: $blurs
echo "$blurs   # errts blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in err_reml --
touch blur.err_reml.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( 101 101 101 101 101  )
    @ b1 += $reps  # last index for current run
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                         \
        errts.$subj\_REML+tlrc"[$b0..$b1]" >> blur.err_reml.1D
    @ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `3dTstat -mean -prefix - blur.err_reml.1D\'` )
echo average err_reml blurs: $blurs
echo "$blurs   # err_reml blur estimates" >> blur_est.$subj.1D


# add 3dClustSim results as attributes to the stats dset
set fxyz = ( `tail -1 blur_est.$subj.1D` )
3dClustSim -both -NN 123 -mask full_mask.$subj+tlrc                     \
           -fwhmxyz $fxyz[1-3] -prefix ClustSim
3drefit -atrstring AFNI_CLUSTSIM_MASK file:ClustSim.mask                \
        -atrstring AFNI_CLUSTSIM_NN1  file:ClustSim.NN1.niml            \
        -atrstring AFNI_CLUSTSIM_NN2  file:ClustSim.NN2.niml            \
        -atrstring AFNI_CLUSTSIM_NN3  file:ClustSim.NN3.niml            \
        stats.$subj+tlrc stats.${subj}_REML+tlrc


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
    -dsets pb00.$subj.r??.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 1.0 -exit0

# ========================== auto block: finalize ==========================

# remove temporary rm.* files
rm -f rm.*

# zip BRIK files to reduce disk space
gzip *.BRIK

cd AddEdge
gzip *.BRIK
cd ../

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) ./@ss_review_basic |& tee out.ss_review.$subj.txt

# return to parent directory
cd ..




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id 9003 -dsets pb00.9003.r1+orig. pb00.9003.r2+orig.     \
#     pb00.9003.r3+orig. pb00.9003.r4+orig. pb00.9003.r5+orig. -do_block      \
#     align tlrc -copy_anat pb00.9003.anat_oblique+orig.                      \
#     -tcat_remove_first_trs 4 -volreg_align_to first -volreg_tlrc_warp       \
#     -regress_stim_times                                                     \
#     /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/A_PosMusic.1d    \
#     /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/A_NegMusic.1d    \
#     /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/A_PosIADS.1d     \
#     /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/A_NegIADS.1d     \
#     /Volumes/Data2/rchambers/Music/AFNIFiles/ProtocolFiles/Response.1d      \
#     -regress_stim_labels PosMusic NegMusic PosIADS NegIADS Response         \
#     -regress_basis 'BLOCK(31.5,1)' -regress_opts_3dD -gltsym 'SYM:          \
#     +PosMusic -NegMusic' -glt_label 1 PosMusic-NegMusic -gltsym 'SYM:       \
#     +PosIADS -NegIADS' -glt_label 2 PosIADS-NegIADS -gltsym 'SYM: +PosMusic \
#     -PosIADS' -glt_label 2 PosMusic-PosIADS -gltsym 'SYM:   \ +NegMusic     \
#     -NegIADS' -glt_label 2 NegMusic-NegIADS -gltsym 'SYM:         \         \
#     +PosMusic +PosIADS -NegMusic -NegIADS' -glt_label 2 PosAll-NegAll       \
#     -gltsym 'SYM: +PosMusic +NegMusic -PosIADS -NegIADS' -glt_label 2       \
#     MusicAll-IADSALL -regress_censor_motion 1.0 -regress_est_blur_errts     \
#     -regress_est_blur_epits -regress_run_clustsim yes -regress_reml_exec    \
#     -script 11997_preprocessing_align_tlrc_reml
